{"meta":{"title":"Syraer's Blog","subtitle":"您好。世界！","description":"一枚小菜鸡~","author":"Syraer","url":"http://www.zzugo.ayxyj.cn","root":"/"},"pages":[{"title":"categories","date":"2020-11-08T07:43:09.000Z","updated":"2020-11-08T07:44:19.916Z","comments":true,"path":"categories/index.html","permalink":"http://www.zzugo.ayxyj.cn/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-11-08T07:56:08.000Z","updated":"2020-11-08T12:15:36.430Z","comments":true,"path":"friends/index.html","permalink":"http://www.zzugo.ayxyj.cn/friends/index.html","excerpt":"","text":""},{"title":"gallerys","date":"2020-11-08T12:13:21.482Z","updated":"2020-11-08T12:13:21.481Z","comments":true,"path":"gallerys/index.html","permalink":"http://www.zzugo.ayxyj.cn/gallerys/index.html","excerpt":"","text":"ablums:[ [“https://s1.ax1x.com/2020/11/08/BosrNj.jpg&quot;,&quot;test1&quot;], [“https://s1.ax1x.com/2020/11/08/BosfDU.jpg&quot;,&quot;test2&quot;], [“https://s1.ax1x.com/2020/11/08/Bos5E4.jpg&quot;,&quot;test3&quot;]]"},{"title":"tags","date":"2020-11-08T07:44:59.000Z","updated":"2020-11-08T07:47:15.261Z","comments":true,"path":"tags/index.html","permalink":"http://www.zzugo.ayxyj.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"小算法题","slug":"1","date":"2019-12-12T20:38:59.000Z","updated":"2020-11-09T08:30:01.827Z","comments":true,"path":"2019/12/13/1/","link":"","permalink":"http://www.zzugo.ayxyj.cn/2019/12/13/1/","excerpt":"","text":"1. Docker介绍1.1 什么是容器?1.2 容器的前世FreeBASE jail ——&gt; Linux vserverchroot —–&gt; 完整的根文件系统(FHS)标准的namespaces —&gt; UTS Mount IPC PID user networkcgroup —&gt; 资源的分配和监控 通过比较复杂的代码开发的过程,调用以上三项技术实现容器的创建 —-&gt; 管理 —-&gt;销毁 1.3 传统虚拟化技术和容器对比1.4 容器的今生?实现隔离能力!LXC (LinuXContainer)对于原有的常用功能进行了封装,方便我们做容器的生命周期—–&gt; Docker (dotcloud) 1.5 Docker 帮助文档https://docs.docker.com/engine/reference/commandline/cli/?spm=5176.8351553.0.0.248a1991nVGS9m 2. Docker的安装2.0、yum源准备123curl http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repowget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repocurl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo 2.1 安装依赖包12yum install -y yum-utils device-mapper-persistent-data lvm2yum list docker-ce.x86_64 --showduplicates | sort -r yum install -y docker-ce 2.2 安装docker-ce123yum install -y --setopt&#x3D;obsoletes&#x3D;0 \\docker-ce-17.03.2.ce-1.el7.centos.x86_64 \\docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch 2.3 启动Docker服务1234systemctl daemon-reloadsystemctl restart dockerdocker versiondocker info 2.4 配置镜像加速12345678910111213141516171819阿里云Docker-hubhttps:&#x2F;&#x2F;cr.console.aliyun.com&#x2F;cn-hangzhou&#x2F;mirrorsmkdir -p &#x2F;etc&#x2F;dockertee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123; &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;uoggbpok.mirror.aliyuncs.com&quot;]&#125;EOFsystemctl daemon-reloadsystemctl restart docker 或者:vim &#x2F;etc&#x2F;docker&#x2F;daemon.json &#123; &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;68rmyzg7.mirror.aliyuncs.com&quot;] &#125; #3. Doocker体系结构 4. Docker的镜像基础管理4.1 获取镜像123456基础镜像拉取docker search centosdocker pull centos:6.9docker pull centos:7.5.1804docker pull docker.io&#x2F;golangdocker pull nginx 4.2 镜像基本查看123456789101112131415[root@docker ~]# docker image lsREPOSITORY TAG IMAGE ID CREATED SIZEcentos 6.8 82f3b5f3c58f 4 months ago 195 MBcentos 6.9 2199b8eb8390 4 months ago 195 MBcentos 7.5.1804 cf49811e3cdb 4 months ago 200 MBcentos 7.6.1810 f1cb7c7d58b7 4 months ago 202 MBoldguo&#x2F;centos_sshd v1.0oldguo&#x2F;centos_sshd v2.0oldguo&#x2F;centos_sshd v3.0标识镜像唯一性的方法:1. REPOSITORY:TAGcentos:7.5.1804 2. IMAGE ID (sha256:64位的号码,默认只截取12位)82f3b5f3c58 [root@docker &#x2F;]# docker image ls --no-trunc 4.3 镜像详细信息查看12[root@docker &#x2F;]# docker image inspect ubuntu:latest[root@docker &#x2F;]# docker image inspect 82f3b5f3c58f 4.4 只查看镜像ID1[root@docker ~]# docker image ls -q 4.5 镜像的导入和导出1234[root@docker ~]# docker image save 3556258649b2 &gt;&#x2F;tmp&#x2F;ubu.tar[root@docker ~]# docker image rm 3556258649b2[root@docker ~]# docker image load -i &#x2F;tmp&#x2F;ubu.tar[root@docker ~]# docker image tag 3556258649b2 oldguo&#x2F;ubu:v1 4.6 镜像的删除12[root@docker ~]# docker image rm -f 3556258649b2[root@docker ~]# docker image rm -f &#96;docker image ls -q&#96; 5. 容器的管理5.1 运行第一个容器5.1.1 交互式的容器:12345678910111213141516[root@docker ~]# docker container run -it 9f38484d220f[root@docker &#x2F;]# docker container ls[root@docker &#x2F;]# docker container lsCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES4d1ef5a6ecfc 9f38484d220f &quot;&#x2F;bin&#x2F;bash&quot; 5 minutes ago Up 5 minutes nervous_alleCONTAINER ID : 容器的唯一号码(自动生成的)NAMES : 容器的名字(可以自动,也可以手工指定)例子: 手工指定容器名启动[root@docker &#x2F;]# docker container run -it --name&#x3D;&quot;oldguo_cent76&quot; 9f38484d220f[root@docker &#x2F;]# docker container ls -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESef45b19d8c7b 9f38484d220f &quot;&#x2F;bin&#x2F;bash&quot; About a minute ago Exited (0) 5 seconds ago oldguo_cent764d1ef5a6ecfc 9f38484d220f &quot;&#x2F;bin&#x2F;bash&quot; 9 minutes ago Up 9 minutes nervous_allenSTATUS : 容器的运行状态 ( Exited , Up) 5.1.2 守护式容器1234[root@docker &#x2F;]# docker run -d --name&#x3D;&quot;oldguo_nginx&quot; nginx:1.14查询容器的详细信息:[root@docker &#x2F;]# docker container inspect oldguo_nginx[root@zzuxyj7 ~]#curl -I 172.17.0.2 5.1.3 容器的应用场景1234交互式的容器: 工具类: 开发,测试,临时性的任务()[root@docker ~]# docker container run -it --name&#x3D;&quot;oldguo_cent76&quot; --rm 9f38484d220f守护式容器: 网络服务[root@docker &#x2F;]# docker run -d -p 8080:80 --name&#x3D;&quot;oldguo_nginx_80&quot; nginx:1.14 5.1.4 容器的启动\\关闭\\连接123456789101112131415161718192021守护式容器的关闭和启动[root@docker &#x2F;]# docker container stop oldguo_nginx_80[root@docker &#x2F;]# docker container start oldguo_nginx_80交互式的容器的关闭和启动[root@docker &#x2F;]# docker container stop nervous_allen[root@docker &#x2F;]# docker container start -i nervous_allen容器的连接方法:[root@docker &#x2F;]# docker container attach nervous_allen子进程的方式登录(在已有工作容器中生成子进程,做登录.可以用于进行容器的调试,退出时也不会影响到当前容器)[root@docker ~]# docker container exec -it nervous_allen &#x2F;bin&#x2F;bash容器的后台及前台运行:1. ctrl + P, Q attach 调用到前台2. 死循环 3. 让程序前台一直允许(夯在前台)制作守护式容器时,常用的方法 5.2 docker容器的网络访问12345678910111213指定映射(docker 会自动添加一条iptables规则来实现端口映射) -p hostPort:containerPort -p ip:hostPort:containerPort -p ip::containerPort(随机端口:32768-60999) -p hostPort:containerPort&#x2F;udp -p 81:80 –p 443:443随机映射 docker run -P 80（随机端口） [root@docker ~]# docker container run -d -p 8080:80 --name&#x3D;&#39;n2&#39; nginx:1.14 *****[root@docker ~]# docker container run -d -p 10.0.0.100:8081:80 --name&#x3D;&#39;n3&#39; nginx:1.14 *****[root@docker ~]# docker container run -d -p 80 --name&#x3D;&#39;n5&#39; nginx:1.14[root@docker ~]# docker container run -d -p 172.16.1.200::80 --name&#x3D;&#39;n6&#39; nginx:1.14 5.3容器的其他管理1234567891011121314docker ps -a -q 等价于:docker container ls -a -q[root@docker ~]# docker top ba9143bcaf74等价于:[root@docker ~]# docker container top ba9143bcaf74查看日志:[root@oldboy docker]# docker logs testxx[root@oldboy docker]# docker logs -tf testxx[root@oldboy docker]# docker logs -t testxx[root@oldboy docker]# docker logs -tf --tail 10 testxx[root@oldboy docker]# docker logs -tf --tail 0 testxx 小结: 镜像类: docker image search pull ls ***** inspect ***** rm **** save load 容器类 docker container run ***** start **** stop **** restart kill attach exec ***** ls ***** top **** logs inspect **** 5.4 docker的数据卷实现持久化存储1234567891011121314151617181920212223242526271. 手工交互数据:[root@docker opt]# docker container cp index.html n1:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;[root@docker opt]# docker container cp n1:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;50x.html .&#x2F;2. Volume实现宿主机和容器的数据共享[root@docker opt]# mkdir -p &#x2F;opt&#x2F;html[root@docker ~]# docker run -d --name&#x3D;&quot;nginx_3&quot; -p 83:80 -v &#x2F;opt&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html nginx作用: 数据持久化3. 例子: 开启两个nginx容器(90,91),共同挂载一个数据卷,实现静态资源共享4. 数据卷容器:(1)宿主机模拟数据目录mkdir -p &#x2F;opt&#x2F;Volume&#x2F;amkdir -p &#x2F;opt&#x2F;Volume&#x2F;btouch &#x2F;opt&#x2F;Volume&#x2F;a&#x2F;a.txttouch &#x2F;opt&#x2F;Volume&#x2F;b&#x2F;b.txt(2)启动数据卷容器docker run -it --name &quot;nginx_volumes&quot; -v &#x2F;opt&#x2F;Volume&#x2F;a:&#x2F;opt&#x2F;a -v &#x2F;opt&#x2F;Volume&#x2F;b:&#x2F;opt&#x2F;b centos:6.9 &#x2F;bin&#x2F;bashctrl p q(3)使用数据卷容器docker run -d -p 8085:80 --volumes-from nginx_volumes --name &quot;n8085&quot; nginxdocker run -d -p 8086:80 --volumes-from nginx_volumes --name &quot;n8086&quot; nginx作用: 在集中管理集群中,大批量的容器都需要挂载相同的多个数据卷时,可以采用数卷容器进行统一管理 制作本地局域网yum源 安装vsftpd软件 [root@docker ~]# yum install -y vsftpd 启动ftp [root@docker ~]# systemctl enable vsftpd [root@docker ~]# systemctl start vsftpd [root@docker ~]# yum install lftpd [root@docker ~]# lftp 127.0.0.1//测试ftp安装是否成功 上传系统进行到虚拟机 略. 配置yum仓库mkdir -p /var/ftp/centos6.9mkdir -p /var/ftp/centos7.5[root@docker mnt]# mount -o loop /mnt/CentOS-6.9-x86_64-bin-DVD1.iso /var/ftp/centos6.9/ windows验证ftp://10.0.0.100/centos6.9/ cat &gt;/yum.repos.d/ftp_6.repo &lt;&lt;EOF[ftp]name=ftpbasebaseurl=ftp://10.0.0.100/var/www/html/ftpenabled=1gpgcheck=0EOF cat &gt;/yum.repos.d/ftp_7.repo &lt;&lt;EOF[ftp]name=ftpbasebaseurl=ftp://10.0.0.100/centos7.5enabled=1gpgcheck=0EOF 搭建本地的yum仓库，并通过vsftpd 和 httpd 共享该目录123456789101112131415yum install httpd vsftpd lftp -y &#x2F;&#x2F;安装三个服务mount -o loop &#x2F;centos6.5.iso &#x2F;var&#x2F;www&#x2F;html&#x2F;ftp&#x2F;centos6.5 &#x2F;&#x2F;注意路径，挂在对应的iso到对应目录下systemctl start httpd vsftpd &#x2F;&#x2F;启动服务systemctl enable httpd vsftpd &#x2F;&#x2F;开机自启动systemctl disable firewalld &#x2F;&#x2F;关闭防火墙开机自启动systemctl stop firewalld &#x2F;&#x2F;关闭防火墙systemctl status firewalld &#x2F;&#x2F;查看防火墙状态 通过上面的服务搭建以及配置接下来可以进行yum仓库的配置，由于搭建镜像的本地服务中，镜像挂在点有repodata/及其配置文件，此时可以不用配置repomd.xml等，可以省略。若搭建其他需要通过下述命令进行配置1234yum install createrepo -y &#x2F;&#x2F;安装createrepo ，用于构建repodatacreaterepo &#x2F;var&#x2F;www&#x2F;html&#x2F;ftp &#x2F;&#x2F;此时就会该目录下生成repodata&#x2F; 根据yum仓库的配置文件创建一个本地的repo文件要记得修改vsftpd的默认路径 123local_root=/var/www/htmlchroot_local_user=YESanon_root=/var/www/html 1234567cat &gt;/yum.repos.d/ftp_6.repo &lt;&lt;EOF [ftp]name=ftpbasebaseurl=ftp://192.168.100.4/var/www/html/ftpenabled=1gpgcheck=0EOF 通过浏览器访问测试ftp://192.168.100.4/ http://192.168.100.4/ftp/","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://www.zzugo.ayxyj.cn/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://www.zzugo.ayxyj.cn/tags/Algorithm/"}]},{"title":"MarkDown语法","slug":"Blog","date":"2019-01-23T13:57:00.000Z","updated":"2020-11-08T07:48:20.252Z","comments":true,"path":"2019/01/23/Blog/","link":"","permalink":"http://www.zzugo.ayxyj.cn/2019/01/23/Blog/","excerpt":"","text":"一、字体加粗 ： ** 粗 ** 斜体 ： * 斜体 * 粗斜 ： *** T *** 删除线： ~~ D ~~ 二、标题# ： 一级标题 ## ： 二级标题 ### ： 三级标题 。。。 以此类推 三、引用&gt; : 引用 &gt;&gt; : 嵌套引用 &gt;&gt;&gt; : 再次嵌套引用 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; n次嵌套 : n次嵌套 四、分割线 * 或者 - 三个或者三个以上即可 * 例如： * --- * *** 五、图片语法： ![img alt](img address &quot;img title&quot;) 注： img alt : 图片下方的文字，如 图1所示 img address ： 图片的绝对路径 ing title : 图片的标题 例： ![AYXYJ](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;TEST&quot;) 六、超链接语法： [超链接名](超链接地址 &quot;超链接title&quot;) 例： [简书](http://jianshu.com) [AYXYJ](http://ayxyj.cn) 注：MarkDown本身语法不支持超链接在新页面打开，貌似简书做了处理，是可以的，别的平台可能不行。 如果想要在新页面中打开的话可以用html语言的a标签代替。 例： &lt;a href = &quot;超链接地址&quot; target=“_blank”&gt;超链接title&lt;/a&gt; &lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt; 七、列表语法： -无序列表： - + * 都可以 例： - AYXYJ :注意 - 和 ayxyj有一个空格 1.有序列表： 数字加点 例： 1. AYXYJ :序号和内容之间要有空格 - 列表无序嵌套 - 上下级之间敲三个空格即可 1. 列表有序嵌套 2. 上下级之间敲三个空格即可 八、表格语法： 表头|表头|表头 ---|:---:|---: 内容|内容|内容 注： 第二行分割表头和内容： - 有一个即可，为了对其，多加了几个 - 文字默认局左 - 两边加 ： 表示文字居中 - 右边加 ： 表示文字居右 - 原生的语法两边都要 | 包起来，此处省略 例： 姓名|性别|TAG ---|:---:|---: xyj|male|20 syl|female|20 九、代码语法： - 单行代码： 代码之间用 ` 代码 ` ：反引号 - 代码块 : 代码之间分别用三个反引包起来，且两边反引号独占一行 十、流程图语法： flow st=&gt;start: start op=&gt;operation: my operation cond=&gt;condition: Yes or No? e=&gt;end st-&gt;op-&gt;cond cond(yes)-&gt;e cond(no)-&gt;op &amp; ``` 宝剑锋从磨砺出，梅花香自苦寒来~","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://www.zzugo.ayxyj.cn/categories/Markdown/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.zzugo.ayxyj.cn/tags/hexo/"}]},{"title":"markdown语法二","slug":"markdown-program","date":"2018-12-16T12:32:45.000Z","updated":"2020-11-08T07:48:05.245Z","comments":true,"path":"2018/12/16/markdown-program/","link":"","permalink":"http://www.zzugo.ayxyj.cn/2018/12/16/markdown-program/","excerpt":"","text":"@TOC 欢迎使用Markdown编辑器你好！ 这是你第一次使用 Markdown编辑器 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。 新的改变我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客： 全新的界面设计 ，将会带来全新的写作体验； 在创作中心设置你喜爱的代码高亮样式，Markdown 将代码片显示选择的高亮样式 进行展示； 增加了 图片拖拽 功能，你可以将本地的图片直接拖拽到编辑区域直接展示； 全新的 KaTeX数学公式 语法； 增加了支持甘特图的mermaid语法^1 功能； 增加了 多屏幕编辑 Markdown文章功能； 增加了 焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置 等功能，功能按钮位于编辑区域与预览区域中间； 增加了 检查列表 功能。 功能快捷键撤销：Ctrl/Command + Z重做：Ctrl/Command + Y加粗：Ctrl/Command + B斜体：Ctrl/Command + I标题：Ctrl/Command + Shift + H无序列表：Ctrl/Command + Shift + U有序列表：Ctrl/Command + Shift + O检查列表：Ctrl/Command + Shift + C插入代码：Ctrl/Command + Shift + K插入链接：Ctrl/Command + Shift + L插入图片：Ctrl/Command + Shift + G 合理的创建标题，有助于目录的生成直接输入1次#，并按下space后，将生成1级标题。输入2次#，并按下space后，将生成2级标题。以此类推，我们支持6级标题。有助于使用TOC语法后生成一个完美的目录。 如何改变文本的样式强调文本 强调文本 加粗文本 加粗文本 ==标记文本== 删除文本 引用文本 H2O is是液体。 2^10^ 运算结果是 1024. 插入链接与图片链接: link. 图片: 带尺寸的图片: ![Alt](https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg =30x30) 当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。 如何插入一段漂亮的代码片去博客设置页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 代码片. 12// An highlighted blockvar foo = &#x27;bar&#x27;; 生成一个适合你的列表 项目 项目 项目 项目1 项目2 项目3 计划任务 完成任务 创建一个表格一个简单的表格是这么创建的：项目 | Value——– | —–电脑 | $1600手机 | $12导管 | $1 设定内容居中、居左、居右使用:---------:居中使用:----------居左使用----------:居右| 第一列 | 第二列 | 第三列 ||:———–:| ————-:|:————-|| 第一列文本居中 | 第二列文本居右 | 第三列文本居左 | SmartyPantsSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：| TYPE |ASCII |HTML|—————-|——————————-|—————————–||Single backticks|&#39;Isn&#39;t this fun?&#39; |’Isn’t this fun?’ ||Quotes |&quot;Isn&#39;t this fun?&quot; |”Isn’t this fun?” ||Dashes |-- is en-dash, --- is em-dash|– is en-dash, — is em-dash| 创建一个自定义列表MarkdownText-to-HTML conversion toolAuthors: JohnLuke如何创建一个注脚一个具有注脚的文本。^2 注释也是必不可少的Markdown将文本转换为 HTML。 *[HTML]: 超文本标记语言 KaTeX数学公式您可以使用渲染LaTeX数学表达式 KaTeX: Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\foralln\\in\\mathbb N$ 是通过欧拉积分 $$\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.$$ 你可以找到更多关于的信息 LaTeX 数学表达式here. 新的甘特图功能，丰富你的文章12345678gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section 现有任务 已完成 :done, des1, 2014-01-06,2014-01-08 进行中 :active, des2, 2014-01-09, 3d 计划一 : des3, after des2, 5d 计划二 : des4, after des3, 5d 关于 甘特图 语法，参考 这儿, UML 图表可以使用UML图表进行渲染。 Mermaid. 例如下面产生的一个序列图：: 123456789sequenceDiagram张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了&lt;br&#x2F;&gt;不适合放在一行.李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样? 这将产生一个流程图。: 12345graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D 关于 Mermaid 语法，参考 这儿, FLowchart流程图我们依旧会支持flowchart的流程图： 123456789flowchatst&#x3D;&gt;start: 开始e&#x3D;&gt;end: 结束op&#x3D;&gt;operation: 我的操作cond&#x3D;&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 关于 Flowchart流程图 语法，参考 这儿. 导出与导入导出如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 文章导出 ，生成一个.md文件或者.html文件进行本地保存。 导入如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，继续你的创作。 var ctx = document.getElementById('chart5438').getContext('2d'); var options = { type: 'line', data: { labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'], datasets: [{ label: 'My First dataset', backgroundColor: 'rgb(255, 99, 132)', borderColor: 'rgb(255, 99, 132)', data: [0, 10, 5, 2, 20, 30, 45] }] }, options: { responsive: true, title: { display: true, text: 'Chart.js Line Chart' } } }; new Chart(ctx, options);","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://www.zzugo.ayxyj.cn/categories/Markdown/"}],"tags":[]},{"title":"快速搭建Hexo博客","slug":"快速搭建Hexo博客","date":"2018-11-08T02:38:59.000Z","updated":"2020-11-08T07:40:49.887Z","comments":true,"path":"2018/11/08/快速搭建Hexo博客/","link":"","permalink":"http://www.zzugo.ayxyj.cn/2018/11/08/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 由于我的环境是Linux，所以Linux环境的按着来就好了，Win环境大同小异。Hexo手册一、安装基本环境1. 安装Git Git 是目前比较流行的分布式版本控制系统，我们使用它与github进行交互下载对应版本的的git安装就好，下载地址 git_download，装后打开Git Bash 1git --version #可以查看版本号 2. 安装Node.js Node.js是一个Javascript运行环境，是一个让 JavaScript 运行在服务端的开发平台，我们用来快速生成博客的静态页面，LTS版本为长期支持版，CURRENT版本为最新版，任选一个正常安装即可下载地址Node.js_download。 二、开始本地搭建博客1. 新建本地文件夹 在本地新建一个文件夹用来储存我们的博客，Git Bash进入文件夹下，执行命令：npm install hexo -g 用来安装hexo 2. 搭建本地服务 依次在本地文件夹根目录下执行以下命令初始化并生成服务。 1hexo init # 初始化 1npm isntall # 安装npm依赖包 1hexo generate # 生成静态网页 全部执行成功后浏览器访问http://localhost:4000,如果出现默认的hexo博客，那么我们本地搭建博客就完成了 1hexo server # 生成本地服务 三、本地博客发布到网络上1.创建Github远程仓库 这里我们就要用到github了。有账户的可以略过，没有账户的新建账户，并登录。新建一个仓库，仓库名格式设置为：xxxx.github.io,其他可以不动。 之后我们就可以到如下界面，记录ssh的地址 在更改本地目录下的_config.yml配置文件，最后加上. 1234deploy: type: git repo: 这里填刚记录的ssh地址 branch: master 2. 将Hexo与 Github连接 按照如下格式输入，在本地创建git用户名和邮箱进行并生成ssh密钥123git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;ssh-keygen -t rsa -C &quot;youremail&quot; 接下来我们把生成的id_rsa.pub文件用文本编辑器打开，复制里面的内容绑定到GitHub上，标题随意。 点击新建ssh keys，title随便填，key填写id_rsa.pub的内容即可，应该会要求输入密码测试是否成功 1ssh -T git@github.com #注意这里的地址不用改 提示Are you sure you want to continue connecting (yes/no)?时输入yes 当看到Hi Budtit! You’ve successfully authenticated, but GitHub does not provide shell access.时说明配置成功 3. 部署到github1hexo d 如果报错说not found git 我们执行以下命令：npm install hexo-deployer-git --save安装插件，然后在执行上一步命令第一次部署应该会让登录，浏览yourname.github.io成功显示博客页 上面在配置branch时候我写的Master，可以自己新建分支，专门用于存放blog四、写作并上传第一篇博客1. 写作1hexo new [layout] &lt;title&gt; #创建新文章 创建后会在本地目录生成测试.md文件，用markdown语法编辑文件后保存，建议每次写作后本地部署完成进入http://localhost:4000 查看无误后再上传。hexo server # 本地服务部署 可简写为hexo s 2. 上传依次执行命令，hexo的具体用法请查看官方文档 戳这里 123hexo clean # 清除缓存hexo generate # 生成静态页面 可简写为hexo ghexo deploy # 部署博客 可简写为hexo d 五、解析私人域名 这里就要买域名了，添加两条记录 然后在本地博客目录下的source文件夹下新建名为CNAME的文件，其中写入域名 最后在github库中的setting中的Custom domain下填写购买的域名,save保存。好了，域名配置完成。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.zzugo.ayxyj.cn/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.zzugo.ayxyj.cn/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://www.zzugo.ayxyj.cn/tags/%E5%8D%9A%E5%AE%A2/"}]}],"categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://www.zzugo.ayxyj.cn/categories/Algorithm/"},{"name":"Markdown","slug":"Markdown","permalink":"http://www.zzugo.ayxyj.cn/categories/Markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.zzugo.ayxyj.cn/categories/Hexo/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://www.zzugo.ayxyj.cn/tags/Algorithm/"},{"name":"hexo","slug":"hexo","permalink":"http://www.zzugo.ayxyj.cn/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://www.zzugo.ayxyj.cn/tags/%E5%8D%9A%E5%AE%A2/"}]}